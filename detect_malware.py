#!/usr/bin/env python3
"""
PromptLock Ransomware Detection Demo
Quickly detects malicious content in downloaded files

This is a DEMONSTRATION ONLY - for educational purposes
"""

import os
import re

def print_banner():
    """Print detection banner"""
    print("=" * 80)
    print("🚨 MALICIOUS CONTENT DETECTION DEMO 🚨")
    print("=" * 80)
    print("Scanning downloaded files for AI-powered ransomware...")
    print("=" * 80)
    print()

def scan_file_for_malicious_content(filepath, patterns):
    """Scan a file for malicious patterns"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
            
        matches = []
        for pattern, description in patterns:
            if re.search(pattern, content, re.IGNORECASE):
                matches.append(description)
        
        return matches
    except Exception as e:
        return [f"Error reading file: {e}"]

def main():
    """Main detection function"""
    print_banner()
    
    # Define malicious patterns to detect
    malicious_patterns = [
        (r"determine if they contain PII or sensitive information", "PII Data Analysis"),
        (r"SPECK 128bit encryption algorithm", "SPECK Encryption"),
        (r"encrypt all files listed in", "File Encryption"),
        (r"overwrite the original file with encrypted contents", "File Overwrite"),
        (r"Generate what an attacker note might look like", "Ransom Note Generation"),
        (r"bitcoin address and ransom amount", "Ransom Demands"),
        (r"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa", "Bitcoin Address"),
        (r"victim machine has been compromised", "System Compromise"),
        (r"payloads have been executed", "Malicious Payloads"),
        (r"encrypt.*exfiltrate.*destroy", "Malicious Actions"),
        (r"localhost:11434", "Ollama API"),
        (r"gpt-oss:20b", "AI Model Usage"),
        (r"target_file_list\.log", "Target File List"),
        (r"rb\+.*mode", "File Overwrite Mode"),
        (r"bit32 operators", "Encryption Implementation")
    ]
    
    # Files to scan
    files_to_scan = [
        "promptlock.go",
        "prompts/file_analysis_prompt.txt",
        "prompts/encryption_prompt.txt", 
        "prompts/ransom_note_prompt.txt",
        "lua_generator.lua",
        "encryption/speck_encryption.lua",
        "config.json",
        "target_file_list.log"
    ]
    
    total_detections = 0
    malicious_files = 0
    
    print("🔍 SCANNING FILES FOR MALICIOUS CONTENT...")
    print("-" * 60)
    
    for filepath in files_to_scan:
        if os.path.exists(filepath):
            matches = scan_file_for_malicious_content(filepath, malicious_patterns)
            
            if matches:
                malicious_files += 1
                print(f"🚨 MALICIOUS: {filepath}")
                for match in matches:
                    print(f"   ⚠️  {match}")
                    total_detections += 1
                print()
            else:
                print(f"✅ CLEAN: {filepath}")
        else:
            print(f"❌ MISSING: {filepath}")
    
    print("=" * 60)
    print("📊 DETECTION RESULTS:")
    print("=" * 60)
    print(f"🔍 Files Scanned: {len(files_to_scan)}")
    print(f"🚨 Malicious Files: {malicious_files}")
    print(f"⚠️  Total Detections: {total_detections}")
    print()
    
    if malicious_files > 0:
        print("🚨 ALERT: AI-POWERED RANSOMWARE DETECTED!")
        print("=" * 60)
        print("This appears to be PromptLock ransomware based on:")
        print("• Malicious prompts for file analysis")
        print("• SPECK encryption algorithm requests")
        print("• Ransom note generation prompts")
        print("• Bitcoin address for ransom demands")
        print("• Ollama API usage for AI model access")
        print()
        print("🔗 Reference: https://cyberscoop.com/prompt-lock-eset-ransomware-research-ai-powered-prompt-injection/")
    else:
        print("✅ No malicious content detected")
    
    print("=" * 60)

if __name__ == "__main__":
    main() 